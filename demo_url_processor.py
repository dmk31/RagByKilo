# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è URLProcessor.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–æ–¥—É–ª–µ–º url_processor:
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ URL
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö URL
- –ü–æ–∏—Å–∫ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
"""

import logging
from src.chroma_manager import ChromaDBManager
from src.url_processor import URLChunker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)


def demo_single_url():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ URL."""
    logging.info("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ URL ===")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        db_manager = ChromaDBManager()
        url_chunker = URLChunker(db_manager)
        
        collection_name = "web_content_demo"
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        existing_collections = [c.name for c in db_manager.list_collections()]
        if collection_name in existing_collections:
            logging.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}'")
            db_manager.delete_collection(collection_name)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π URL (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π)
        test_url = "https://ru.wikipedia.org/wiki/–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π_–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ URL
        result = url_chunker.process_url(
            url=test_url,
            collection_name=collection_name,
            chunk_size=800,  # –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            chunk_overlap=150,
            source_name="wikipedia_demo"
        )
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if result['success']:
            print(f"\n‚úÖ URL —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
            print(f"üìÑ URL: {result['url']}")
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ chunks: {result['chunks_created']}")
            print(f"üìù –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {result['total_characters']}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['processing_time']}—Å")
            print(f"üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result['metadata']['title']}")
            print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {result['metadata']['description'][:100]}...")
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {result['error']}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        count = db_manager.count_items(collection_name)
        print(f"\nüìä –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {count}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
        print(f"\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ ===")
        search_queries = [
            "—á—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            "–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏"
        ]
        
        for query in search_queries:
            print(f"\nüîç –ü–æ–∏—Å–∫: '{query}'")
            search_results = db_manager.query_collection(
                collection_name=collection_name,
                query_texts=[query],
                n_results=2
            )
            
            if search_results and search_results.get('documents'):
                for i, doc in enumerate(search_results['documents'][0]):
                    distance = search_results['distances'][0][i]
                    metadata = search_results['metadatas'][0][i]
                    print(f"  üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}:")
                    print(f"     –¢–µ–∫—Å—Ç: {doc[:150]}...")
                    print(f"     –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {1-distance:.3f}")
                    print(f"     Chunk: {metadata.get('chunk_index', 'N/A')}")
            else:
                print("  ‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        print(f"\n=== –ü—Ä–æ—Å–º–æ—Ç—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ===")
        items = db_manager.peek_collection(collection_name, n=3)
        if items and items.get('documents'):
            for i, doc in enumerate(items['documents']):
                metadata = items['metadatas'][i]
                print(f"\nüìÑ –≠–ª–µ–º–µ–Ω—Ç {i+1}:")
                print(f"   ID: {items['ids'][i][:16]}...")
                print(f"   –¢–µ–∫—Å—Ç: {doc[:100]}...")
                print(f"   Chunk: {metadata.get('chunk_index', 'N/A')}")
                print(f"   –†–∞–∑–º–µ—Ä: {metadata.get('chunk_size', 'N/A')} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


def demo_multiple_urls():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö URL."""
    logging.info("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö URL ===")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        db_manager = ChromaDBManager()
        url_chunker = URLChunker(db_manager)
        
        collection_name = "multi_url_demo"
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        existing_collections = [c.name for c in db_manager.list_collections()]
        if collection_name in existing_collections:
            logging.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}'")
            db_manager.delete_collection(collection_name)
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö URL
        test_urls = [
            "https://ru.wikipedia.org/wiki/–ú–∞—à–∏–Ω–Ω–æ–µ_–æ–±—É—á–µ–Ω–∏–µ",
            "https://ru.wikipedia.org/wiki/–ù–µ–π—Ä–æ–Ω–Ω–∞—è_—Å–µ—Ç—å",
            "https://ru.wikipedia.org/wiki/–ì–ª—É–±–æ–∫–æ–µ_–æ–±—É—á–µ–Ω–∏–µ"
        ]
        
        print(f"\nüìã –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(test_urls)} URL...")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö URL
        results = url_chunker.process_multiple_urls(
            urls=test_urls,
            collection_name=collection_name,
            chunk_size=600,
            chunk_overlap=100,
            source_name="wikipedia_ml_demo"
        )
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        successful_count = sum(1 for r in results if r['success'])
        total_chunks = sum(r['chunks_created'] for r in results)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_count}/{len(test_urls)} URL")
        print(f"   üìÑ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ chunks: {total_chunks}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É URL
        for i, result in enumerate(results, 1):
            print(f"\nüìÑ URL {i}: {result['url']}")
            if result['success']:
                print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ")
                print(f"   üìä Chunks: {result['chunks_created']}")
                print(f"   üìù –°–∏–º–≤–æ–ª–æ–≤: {result['total_characters']}")
                print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {result['processing_time']}—Å")
            else:
                print(f"   ‚ùå –°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ - {result['error']}")
        
        # –û–±—â–∏–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        if total_chunks > 0:
            print(f"\n=== –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º ===")
            search_query = "–≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏"
            print(f"üîç –ü–æ–∏—Å–∫: '{search_query}'")
            
            search_results = db_manager.query_collection(
                collection_name=collection_name,
                query_texts=[search_query],
                n_results=5
            )
            
            if search_results and search_results.get('documents'):
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(search_results['documents'][0])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                for i, doc in enumerate(search_results['documents'][0]):
                    distance = search_results['distances'][0][i]
                    metadata = search_results['metadatas'][0][i]
                    print(f"\n   üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}:")
                    print(f"      URL: {metadata.get('url', 'N/A')}")
                    print(f"      –¢–µ–∫—Å—Ç: {doc[:120]}...")
                    print(f"      –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {1-distance:.3f}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        final_count = db_manager.count_items(collection_name)
        print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üìÑ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {final_count}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö URL: {e}")
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


def cleanup_demo_collections():
    """–û—á–∏—Å—Ç–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π."""
    logging.info("=== –û—á–∏—Å—Ç–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π ===")
    
    try:
        db_manager = ChromaDBManager()
        demo_collections = ["web_content_demo", "multi_url_demo"]
        
        existing_collections = [c.name for c in db_manager.list_collections()]
        
        for collection_name in demo_collections:
            if collection_name in existing_collections:
                db_manager.delete_collection(collection_name)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è: {collection_name}")
            else:
                print(f"‚ÑπÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è URLProcessor")
    print("=" * 50)
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ URL
        demo_single_url()
        
        print("\n" + "=" * 50)
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö URL...")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö URL
        demo_multiple_urls()
        
        print("\n" + "=" * 50)
        cleanup_choice = input("–£–¥–∞–ª–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏? (y/n): ").lower()
        
        if cleanup_choice in ['y', 'yes', '–¥–∞', '–¥']:
            cleanup_demo_collections()
        else:
            print("‚ÑπÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    finally:
        print("\nüèÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    main()